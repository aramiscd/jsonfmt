# go get -u -v github.com/go-task/task/cmd/task

version : 2

vars :
  target  : jsonfmt
  ghc     : ~/.ghcup/bin/ghc

  modules :
    src/Main.hs
    src/Parse.hs
    src/Json.hs
    src/Json/Parse.hs
    src/Json/Pretty.hs
    
  tests :
    tests/Main.hs

  deps :
    deps/aramis/ulme/src/Ulme.hs
    deps/aramis/ulme/src/Ulme/Basics.hs
    deps/aramis/ulme/src/Ulme/Char.hs
    deps/aramis/ulme/src/Ulme/Dict.hs
    deps/aramis/ulme/src/Ulme/List.hs
    deps/aramis/ulme/src/Ulme/Maybe.hs
    deps/aramis/ulme/src/Ulme/Result.hs
    deps/aramis/ulme/src/Ulme/Set.hs
    deps/aramis/ulme/src/Ulme/String.hs
    deps/aramis/ulme/src/Ulme/Tuple.hs
    deps/aramis/ulme-io/src/Ulme/IO.hs

  ghc_args :
    -hidir build
    -odir build
    -Werror
    -Weverything
    -Wno-missing-import-lists
    -Wno-missing-local-signatures
    -Wno-monomorphism-restriction
    -Wno-redundant-constraints
    -Wno-safe
    -Wno-type-defaults
    -XLambdaCase
    -XNoImplicitPrelude
    -XOverloadedStrings
    -XPackageImports
    -XStrict

  ghc_dev_args :
    -O0
    -Wno-missing-exported-signatures
    -Wno-missing-export-lists
    -Wno-missing-signatures
    -Wno-unsafe
    -Wno-unused-imports
    -Wno-unused-local-binds
    -Wno-unused-matches
    -Wno-unused-top-binds

  ghc_test_args : -Wno-unsafe

tasks :
  setup :
    cmds :
      [ " if [ ! -d deps/aramis/ulme ]
        ; then git clone https://git.sr.ht/~aramis/ulme deps/aramis/ulme
        ; fi
        ; cd deps/aramis/ulme
        ; git checkout -q f5d0dd66e3751c3f5eefe82efe36e96831255cb7
        "
      , " if [ ! -d deps/aramis/ulme-io ]
        ; then git clone https://git.sr.ht/~aramis/ulme-io deps/aramis/ulme-io
        ; fi
        ; cd deps/aramis/ulme-io
        ; git checkout -q 35f80da754822ef36779792065a565882dfe4bf7
        "
      ]
    
  build :
    cmds :
      [ " mkdir -p build "
      , " {{.ghc}} {{.ghc_args}} {{.modules}} {{.deps}} -o build/{{.target}} "
      ]

  build-dev :
    cmds :
      [ " mkdir -p build "
      , " {{.ghc}} {{.ghc_args}} {{.ghc_dev_args}} {{.modules}} {{.deps}} -o build/{{.target}} "
      ]

  watch :
    silent : true
    cmds :
      [ " while true ; do inotifywait -e modify -q -r src ; task build-dev && clear && task run ; done " ]

  test :
    cmds :
      [ " mkdir -p build "
      , " {{.ghc}} {{.ghc_args}} {{.ghc_test_args}} {{.tests}} {{.modules}} {{.deps}} -o build/tests "
      , " build/tests "
      ]

  test-dev :
    cmds :
      [ " mkdir -p build "
      , " {{.ghc}} {{.ghc_args}} {{.ghc_dev_args}} {{.ghc_test_args}} {{.tests}} {{.modules}} {{.deps}} -o build/tests "
      , " build/tests "
      ]

  run :
    silent : true
    cmds :
      [ " echo
            ' {\"foo\":\"bla\",\"fooo\":\"bla\",\"foooo\":\"bla\"
              ,\"fooooo\":\"bla\",\"foo\":\"bla\",\"foo\":\"bla\"
              ,\"foo\":\"bla\",\"foo\":\"bla\"
              }
            '
        | build/{{.target}}
        "
      ]

  install :
    cmds :
      [ " mkdir -p ~/.local/bin "
      , " cp build/{{.target}} ~/.local/bin/{{.target}} "
      ]

  clean :
    cmds :
      [ " rm -rf build " ]

  clean-all :
    cmds :
      [ " rm -rf build deps "
      ]

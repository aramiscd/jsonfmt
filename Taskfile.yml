# go get -u -v github.com/go-task/task/cmd/task

version : 2

vars :
  ghc         : /usr/bin/ghc
  build_dir   : build
  main_module : src/Main.hs
  target      : jsonfmt
  tests       : tests/tests.hs
  bin_dir     : ~/.local/bin
  deps_dir    : deps

  modules :
    ./src/Parse.hs
    ./src/Json.hs
    ./src/Json/Parse.hs
    ./src/Json/Pretty.hs

  deps :
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/Basics.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/Char.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/Dict.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/List.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/Log.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/Maybe.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/Result.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/Set.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/String.hs
    ./{{.deps_dir}}/aramiscd/haskell-ulme/src/Ulme/Tuple.hs

  ghc_args :
    -hidir {{.build_dir}}
    -odir {{.build_dir}}
    -Werror
    -Weverything
    -Wno-missing-import-lists
    -Wno-missing-local-signatures
    -Wno-monomorphism-restriction
    -Wno-redundant-constraints
    -Wno-safe
    -Wno-type-defaults
    -XLambdaCase
    -XNoImplicitPrelude
    -XOverloadedStrings
    -XPackageImports
    -XStrict

  ghc_dev_args :
    -O0
    -Wno-missing-exported-signatures
    -Wno-missing-export-lists
    -Wno-missing-signatures
    -Wno-unsafe
    -Wno-unused-imports
    -Wno-unused-local-binds
    -Wno-unused-matches
    -Wno-unused-top-binds

  ghc_test_args : -Wno-unsafe

tasks :
  setup :
    cmds :
      [ " if [ ! -d {{.deps_dir}}/aramiscd/haskell-ulme ]; then
            git clone git@eee.ygg:haskell-ulme
                {{.deps_dir}}/aramiscd/haskell-ulme;
          fi
        "
      ]
    
  build :
    cmds :
      [ " mkdir -p ./build/ "
      , " {{.ghc}} {{.ghc_args}} {{.main_module}}
          {{.modules}} {{.deps}} -o {{.build_dir}}/{{.target}}
        "
      ]

  build-dev :
    cmds :
      [ " mkdir -p ./build/ "
      , " {{.ghc}} {{.ghc_args}} {{.ghc_dev_args}} {{.main_module}}
          {{.modules}} {{.deps}} -o {{.build_dir}}/{{.target}}
        "
      ]

  watch :
    silent  : true
    cmds    :
      [ " while true
        ; do inotifywait -e modify -q -r src
        ; task build-dev && clear && task run
        ; done
        "
      ]

  test :
    cmds :
      [ " {{.ghc}} {{.ghc_args}} {{.ghc_dev_args}} {{.ghc_test_args}}
          {{.tests}} {{.modules}} {{.deps}}
        "
      , " tests/tests "
      ]

  run :
    silent : true
    cmds :
      [ " echo '{\"foo\":\"bla\",\"fooo\":\"bla\",\"foooo\":\"bla\"
                ,\"fooooo\":\"bla\",\"foo\":\"bla\",\"foo\":\"bla\"
                ,\"foo\":\"bla\",\"foo\":\"bla\"}'
        | {{.build_dir}}/{{.target}} "
      ]

  install :
    cmds : [ " cp {{.build_dir}}/{{.target}} {{.bin_dir}} " ]

  clean :
    cmds : [ " rm -rf {{.build_dir}} " ]

  clean-all :
      cmds : [ " rm -rf {{.build_dir}} {{.deps_dir}} " ]
